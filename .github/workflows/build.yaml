name: Build ðŸ“¦

on:
  push:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Tag the build
  tag:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: Klemensas/action-autotag@stable
      id: auto-tag
      with:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        tag_prefix: "v"
    outputs:
      version: "${{steps.auto-tag.outputs.version}}.${{github.run_number}}"
      tag: ${{ steps.auto-tag.outputs.tagname }}

  # Builds an executable
  executable:
    strategy:
      matrix:
        contained: [ true, false ]
        os: [ ubuntu-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-latest
            runtime: win-x64
          - contained: true
            name: '-contained'
          - contained: false
            name: ''
    runs-on: ${{ matrix.os }}
    needs: [ tag ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
      - name: Apply Tag
        shell: pwsh
        run: |
          ./.github/workflows/scripts/PatchProjectVersion.ps1 ${{needs.tag.outputs.version}}

      - name: Publish
        run: dotnet publish -c Release -o UnityPackageExporter/bin -r ${{matrix.runtime}} --self-contained ${{matrix.contained}} UnityPackageExporter
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: "UnityPackageExporter-${{matrix.runtime}}${{matrix.name}}"
          path: UnityPackageExporter/bin/*

  # Builds a nuget package
  package:
    runs-on: ubuntu-latest
    needs: [ tag ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
      - name: Apply Tag
        shell: pwsh
        run: |
          ./.github/workflows/scripts/PatchProjectVersion.ps1 ${{needs.tag.outputs.version}}

      - name: Build Nuget
        run: dotnet pack UnityPackageExporter -c Release
      - name: Upload Nuget
        uses: actions/upload-artifact@v3.0.0
        with:
          name: "UnityPackageExporter-Nuget"
          path: "UnityPackageExporter/bin/*.nupkg"

  # Update the release
  release:
    runs-on: ubuntu-latest
    needs: [ tag, package, executable ]
    if: ${{ startsWith(needs.tag.outputs.tag, 'v') }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Collate Artifacts
        run: |
          cd artifacts
          for i in */; do zip -r "release/${i%/}.zip" "$i"; done
          rm release/UnityPackageExporter-Nuget.zip          
          mkdir release
          cp **/*.nupkg release/

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ needs.tag.outputs.tag }}
          prerelease: true
          title: Release ${{ needs.tag.outputs.tag }}
          files: artifacts/release/*
